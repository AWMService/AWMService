// <auto-generated />
using System;
using AWMService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AWMService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AWMService.Domain.Entities.AcademicYears", b =>
                {
                    b.Property<int>("AcademicYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicYearId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("YearName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AcademicYearId");

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Applications", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotivationLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TopicId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Attachments", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentsId"));

                    b.Property<int>("AssociatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("FileData")
                        .HasColumnType("tinyint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UploadedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("AttachmentsId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CheckTypes", b =>
                {
                    b.Property<int>("CheckTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CheckTypeId");

                    b.ToTable("CheckTypes");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CommissionMembers", b =>
                {
                    b.Property<int>("CommissionId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("RoleInCommission")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CommissionId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("CommissionMembers");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CommissionTypes", b =>
                {
                    b.Property<int>("CommissionTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommissionTypesId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CommissionTypesId");

                    b.ToTable("CommissionTypes");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Commissions", b =>
                {
                    b.Property<int>("CommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommissionId"));

                    b.Property<int>("CommissionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int>("SecretaryId")
                        .HasColumnType("int");

                    b.HasKey("CommissionId");

                    b.HasIndex("CommissionTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("SecretaryId");

                    b.ToTable("Commissions");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DefenseGrades", b =>
                {
                    b.Property<int>("DefenseGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefenseGradeId"));

                    b.Property<int>("DefenseScheduledId")
                        .HasColumnType("int");

                    b.Property<string>("FinalGrade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("FinalScore")
                        .HasColumnType("real");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("DefenseGradeId");

                    b.HasIndex("DefenseScheduledId");

                    b.HasIndex("StatusId");

                    b.ToTable("DefenseGrades");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DefenseSchedules", b =>
                {
                    b.Property<int>("DefenseSchedulesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefenseSchedulesId"));

                    b.Property<int>("CommissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DefenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("StudentWorkId")
                        .HasColumnType("int");

                    b.HasKey("DefenseSchedulesId");

                    b.HasIndex("CommissionId");

                    b.HasIndex("StudentWorkId");

                    b.ToTable("DefenseSchedules");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("InstituteId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("InstituteId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DepartmentExperts", b =>
                {
                    b.Property<int>("DepartmentExpertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentExpertId"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CheckTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentExpertId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("CheckTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("DepartmentExperts");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Directions", b =>
                {
                    b.Property<int>("DirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectionId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameKz")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("DirectionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.EvaluationCriteria", b =>
                {
                    b.Property<int>("EvaluationCriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluationCriteriaId"));

                    b.Property<int>("CommissionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EvaluationCriteriaId");

                    b.HasIndex("CommissionTypeId");

                    b.ToTable("EvaluationCriteria");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.EvaluationScores", b =>
                {
                    b.Property<int>("EvaluationScoresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluationScoresId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommissionMemberId")
                        .HasColumnType("int");

                    b.Property<int>("CriteriaId")
                        .HasColumnType("int");

                    b.Property<int>("DefenseGradeId")
                        .HasColumnType("int");

                    b.Property<int>("ScoreValue")
                        .HasColumnType("int");

                    b.HasKey("EvaluationScoresId");

                    b.HasIndex("CommissionMemberId");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("DefenseGradeId");

                    b.ToTable("EvaluationScores");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Institutes", b =>
                {
                    b.Property<int>("InstituteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstituteId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("InstituteId");

                    b.ToTable("Institutes");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.PeriodTypes", b =>
                {
                    b.Property<int>("PeriodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeriodTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PeriodTypeId");

                    b.ToTable("PeriodTypes");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Periods", b =>
                {
                    b.Property<int>("PeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeriodId"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PeriodTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("PeriodId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PeriodTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Permissions", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PermissionId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.RolePermissions", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Statuses", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StatusId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.StudentWork", b =>
                {
                    b.Property<int>("StudentWorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentWorkId"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinalGrade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("StudentWorkId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TopicId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("StudentWorks");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.SupervisorApprovals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("SupervisorApprovals");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Topics", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DirectionId")
                        .HasColumnType("int");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SuperVisorId")
                        .HasColumnType("int");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("TopicId");

                    b.HasIndex("DirectionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SuperVisorId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.UserRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IIN")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SurName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IIN")
                        .IsUnique()
                        .HasFilter("[IIN] IS NOT NULL");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.WorkChecks", b =>
                {
                    b.Property<int>("WorkChecksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkChecksId"));

                    b.Property<int>("CheckTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExpertId")
                        .HasColumnType("int");

                    b.Property<string>("ResultData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("StudentWorkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkChecksId");

                    b.HasIndex("CheckTypeId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentWorkId");

                    b.ToTable("WorkChecks");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.WorkTypes", b =>
                {
                    b.Property<int>("WorkTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WorkTypeId");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Applications", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany("Applications")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "Student")
                        .WithMany("Applications")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Topics", "Topic")
                        .WithMany("Applications")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Student");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Attachments", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", "UploadedBy")
                        .WithMany("Attachments")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CommissionMembers", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Commissions", "Commission")
                        .WithMany("CommissionMembers")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "Member")
                        .WithMany("CommissionMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commission");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Commissions", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.CommissionTypes", "CommissionTypes")
                        .WithMany("Commissions")
                        .HasForeignKey("CommissionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Department", "Department")
                        .WithMany("Commissions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Periods", "Periods")
                        .WithMany("Commissions")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "Secretary")
                        .WithMany("Commissions")
                        .HasForeignKey("SecretaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommissionTypes");

                    b.Navigation("Department");

                    b.Navigation("Periods");

                    b.Navigation("Secretary");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DefenseGrades", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.DefenseSchedules", "DefenseScheduled")
                        .WithMany("DefenseGrades")
                        .HasForeignKey("DefenseScheduledId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany("DefenseGrades")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefenseScheduled");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DefenseSchedules", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Commissions", "Commissions")
                        .WithMany("DefenseSchedules")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.StudentWork", "StudentWorks")
                        .WithMany("DefenseSchedules")
                        .HasForeignKey("StudentWorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commissions");

                    b.Navigation("StudentWorks");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Department", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Institutes", "Institute")
                        .WithMany("Departments")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DepartmentExperts", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.AcademicYears", "AcademicYear")
                        .WithMany("DepartmentExperts")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "AssignedByUser")
                        .WithMany("AssignedDepartmentExperts")
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.CheckTypes", "CheckType")
                        .WithMany("DepartmentExperts")
                        .HasForeignKey("CheckTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Department", "Department")
                        .WithMany("DepartmentExperts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "User")
                        .WithMany("DepartmentExperts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("AssignedByUser");

                    b.Navigation("CheckType");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Directions", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany("Directions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "Supervisor")
                        .WithMany("Directions")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.EvaluationCriteria", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.CommissionTypes", "CommissionType")
                        .WithMany("EvaluationCriteria")
                        .HasForeignKey("CommissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommissionType");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.EvaluationScores", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", "CommissionMember")
                        .WithMany("EvaluationScores")
                        .HasForeignKey("CommissionMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.EvaluationCriteria", "Criteria")
                        .WithMany("EvaluationScores")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.DefenseGrades", "DefenseGrade")
                        .WithMany("EvaluationScores")
                        .HasForeignKey("DefenseGradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommissionMember");

                    b.Navigation("Criteria");

                    b.Navigation("DefenseGrade");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Periods", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.AcademicYears", "AcademicYear")
                        .WithMany("Periods")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "CreatedByUser")
                        .WithMany("Periods")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.PeriodTypes", "PeriodType")
                        .WithMany("Periods")
                        .HasForeignKey("PeriodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany("Periods")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("CreatedByUser");

                    b.Navigation("PeriodType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.RolePermissions", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Permissions", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Roles", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.StudentWork", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.AcademicYears", "AcademicYear")
                        .WithMany("StudentWorks")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany("StudentWorks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "Student")
                        .WithMany("StudentWorks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Topics", "Topic")
                        .WithMany("StudentWorks")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.WorkTypes", "WorkType")
                        .WithMany("StudentWorks")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Status");

                    b.Navigation("Student");

                    b.Navigation("Topic");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.SupervisorApprovals", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.AcademicYears", "AcademicYear")
                        .WithMany("SupervisorApprovals")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "ApprovedByUser")
                        .WithMany("ApprovedByUsers")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Department", "Department")
                        .WithMany("SupervisorApprovals")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "User")
                        .WithMany("SupervisorApprovals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Topics", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Directions", "Direction")
                        .WithMany("Topics")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany("Topics")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "SuperVisor")
                        .WithMany("Topics")
                        .HasForeignKey("SuperVisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Direction");

                    b.Navigation("Status");

                    b.Navigation("SuperVisor");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.UserRoles", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Roles", "Roles")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "Users")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Users", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.WorkChecks", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.CheckTypes", "CheckType")
                        .WithMany("WorkChecks")
                        .HasForeignKey("CheckTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "Expert")
                        .WithMany("WorkChecks")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany("WorkChecks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.StudentWork", "StudentWork")
                        .WithMany("WorkChecks")
                        .HasForeignKey("StudentWorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CheckType");

                    b.Navigation("Expert");

                    b.Navigation("Status");

                    b.Navigation("StudentWork");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.AcademicYears", b =>
                {
                    b.Navigation("DepartmentExperts");

                    b.Navigation("Periods");

                    b.Navigation("StudentWorks");

                    b.Navigation("SupervisorApprovals");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CheckTypes", b =>
                {
                    b.Navigation("DepartmentExperts");

                    b.Navigation("WorkChecks");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CommissionTypes", b =>
                {
                    b.Navigation("Commissions");

                    b.Navigation("EvaluationCriteria");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Commissions", b =>
                {
                    b.Navigation("CommissionMembers");

                    b.Navigation("DefenseSchedules");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DefenseGrades", b =>
                {
                    b.Navigation("EvaluationScores");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DefenseSchedules", b =>
                {
                    b.Navigation("DefenseGrades");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Department", b =>
                {
                    b.Navigation("Commissions");

                    b.Navigation("DepartmentExperts");

                    b.Navigation("SupervisorApprovals");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Directions", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.EvaluationCriteria", b =>
                {
                    b.Navigation("EvaluationScores");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Institutes", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.PeriodTypes", b =>
                {
                    b.Navigation("Periods");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Periods", b =>
                {
                    b.Navigation("Commissions");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Permissions", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Roles", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Statuses", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("DefenseGrades");

                    b.Navigation("Directions");

                    b.Navigation("Periods");

                    b.Navigation("StudentWorks");

                    b.Navigation("Topics");

                    b.Navigation("WorkChecks");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.StudentWork", b =>
                {
                    b.Navigation("DefenseSchedules");

                    b.Navigation("WorkChecks");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Topics", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("StudentWorks");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.UserType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Users", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ApprovedByUsers");

                    b.Navigation("AssignedDepartmentExperts");

                    b.Navigation("Attachments");

                    b.Navigation("CommissionMembers");

                    b.Navigation("Commissions");

                    b.Navigation("DepartmentExperts");

                    b.Navigation("Directions");

                    b.Navigation("EvaluationScores");

                    b.Navigation("Periods");

                    b.Navigation("StudentWorks");

                    b.Navigation("SupervisorApprovals");

                    b.Navigation("Topics");

                    b.Navigation("UserRoles");

                    b.Navigation("WorkChecks");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.WorkTypes", b =>
                {
                    b.Navigation("StudentWorks");
                });
#pragma warning restore 612, 618
        }
    }
}
