// <auto-generated />
using System;
using AWMService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AWMService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250815143448_FirstInit")]
    partial class FirstInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AWMService.Domain.Entities.AcademicYears", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("YearName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("YearName");

                    b.ToTable("AcademicYears", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Applications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatusId");

                    b.HasIndex("TopicId");

                    b.HasIndex("StudentId", "TopicId")
                        .IsUnique();

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentWorkId")
                        .HasColumnType("int");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkCheckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StudentWorkId");

                    b.HasIndex("UploadedBy");

                    b.HasIndex("UploadedOn");

                    b.HasIndex("WorkCheckId");

                    b.ToTable("Attachments", null, t =>
                        {
                            t.HasCheckConstraint("CK_Attachments_FileSize_NonNegative", "[FileSize] >= 0");
                        });
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CheckTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Name");

                    b.ToTable("CheckTypes", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CommissionMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommissionId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalContactId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("RemovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleInCommission")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("ExternalContactId");

                    b.HasIndex("MemberId");

                    b.HasIndex("RemovedBy");

                    b.HasIndex("CommissionId", "ExternalContactId")
                        .IsUnique()
                        .HasFilter("[ExternalContactId] IS NOT NULL");

                    b.HasIndex("CommissionId", "MemberId")
                        .IsUnique()
                        .HasFilter("[MemberId] IS NOT NULL");

                    b.ToTable("CommissionMembers", null, t =>
                        {
                            t.HasCheckConstraint("CK_CommissionMembers_EitherMemberOrExternal", "([MemberId] IS NOT NULL) OR ([ExternalContactId] IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CommissionTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Name");

                    b.ToTable("CommissionTypes", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Commissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommissionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CommissionTypesId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int>("SecretaryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommissionTypeId");

                    b.HasIndex("CommissionTypesId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PeriodId");

                    b.HasIndex("SecretaryId");

                    b.HasIndex("DepartmentId", "PeriodId", "CommissionTypeId");

                    b.ToTable("Commissions", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DefenseGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DefenseScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("FinalGrade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("FinalScore")
                        .HasColumnType("float");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DefenseScheduleId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatusId");

                    b.ToTable("DefenseGrades", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DefenseSchedules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommissionId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DefenseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentWorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommissionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DefenseDate");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StudentWorkId");

                    b.ToTable("DefenseSchedules", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DepartmentExperts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CheckTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RevokedBy")
                        .HasColumnType("int");

                    b.Property<int?>("RevokedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("CheckTypeId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("RevokedBy");

                    b.HasIndex("RevokedByUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("DepartmentId", "CheckTypeId", "AcademicYearId", "UserId")
                        .IsUnique();

                    b.ToTable("DepartmentExperts", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InstituteId")
                        .HasColumnType("int");

                    b.Property<int?>("InstitutesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("InstitutesId");

                    b.HasIndex("InstituteId", "Name");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Directions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameKz")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Directions", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.EvaluationCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommissionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("CommissionTypeId", "Name");

                    b.ToTable("EvaluationCriteria", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.EvaluationScores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommissionMemberId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CriteriaId")
                        .HasColumnType("int");

                    b.Property<int>("DefenseGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScoreValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommissionMemberId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("DefenseGradeId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("EvaluationScores", null, t =>
                        {
                            t.HasCheckConstraint("CK_EvaluationScores_ScoreValue_NonNegative", "[ScoreValue] >= 0");
                        });
                });

            modelBuilder.Entity("AWMService.Domain.Entities.ExternalContacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Organization")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Position")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("FullName");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("Organization", "FullName");

                    b.ToTable("ExternalContacts", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Institutes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Institutes", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Notifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("UserId", "IsRead", "CreatedOn");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.PeriodTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Name");

                    b.ToTable("PeriodTypes", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Periods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int?>("AcademicYearsId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PeriodTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodTypesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearsId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("EndDate");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PeriodTypeId");

                    b.HasIndex("PeriodTypesId");

                    b.HasIndex("StartDate");

                    b.HasIndex("StatusId");

                    b.HasIndex("AcademicYearId", "PeriodTypeId");

                    b.ToTable("Periods", null, t =>
                        {
                            t.HasCheckConstraint("CK_Periods_Dates", "[StartDate] <= [EndDate]");
                        });
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.RolePermissions", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RevokedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RevokedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("RolesId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SettingKey")
                        .IsUnique();

                    b.ToTable("Settings", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Statuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Statuses", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.StudentWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinalGrade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicsId")
                        .HasColumnType("int");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkTypesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TopicId");

                    b.HasIndex("TopicsId");

                    b.HasIndex("WorkTypeId");

                    b.HasIndex("WorkTypesId");

                    b.HasIndex("StudentId", "AcademicYearId", "WorkTypeId");

                    b.ToTable("StudentWork", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.SupervisorApprovals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RevokedBy")
                        .HasColumnType("int");

                    b.Property<int?>("RevokedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("RevokedBy");

                    b.HasIndex("RevokedByUserId");

                    b.HasIndex("UserId", "DepartmentId", "AcademicYearId")
                        .IsUnique();

                    b.ToTable("SupervisorApprovals", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Topics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DirectionId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectionsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MaxParticipants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DirectionId");

                    b.HasIndex("DirectionsId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Topics", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.UserRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RevokedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("RevokedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("RolesId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.UserTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IIN")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SurName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserTypesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentsId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IIN")
                        .IsUnique()
                        .HasFilter("[IIN] IS NOT NULL");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("UserTypeId");

                    b.HasIndex("UserTypesId");

                    b.HasIndex("LastName", "FirstName");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.WorkChecks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CheckTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExpertId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResultData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("StudentWorkId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmittedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CheckTypeId");

                    b.HasIndex("CheckedOn");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExpertId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubmittedOn");

                    b.HasIndex("StudentWorkId", "CheckTypeId", "StatusId");

                    b.ToTable("WorkChecks", null, t =>
                        {
                            t.HasCheckConstraint("CK_WorkChecks_ExpertOrReviewer", "([ExpertId] IS NOT NULL) OR ([ReviewerId] IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("AWMService.Domain.Entities.WorkTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Name");

                    b.ToTable("WorkTypes", (string)null);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.AcademicYears", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Applications", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Topics", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Student");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Attachments", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.StudentWork", "StudentWork")
                        .WithMany("Attachments")
                        .HasForeignKey("StudentWorkId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AWMService.Domain.Entities.Users", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.WorkChecks", "WorkCheck")
                        .WithMany("Attachments")
                        .HasForeignKey("WorkCheckId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("StudentWork");

                    b.Navigation("UploadedByUser");

                    b.Navigation("WorkCheck");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CheckTypes", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CommissionMembers", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Commissions", "Commission")
                        .WithMany("Members")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.ExternalContacts", "ExternalContact")
                        .WithMany()
                        .HasForeignKey("ExternalContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("RemovedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Commission");

                    b.Navigation("ExternalContact");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CommissionTypes", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Commissions", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.CommissionTypes", "CommissionType")
                        .WithMany()
                        .HasForeignKey("CommissionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.CommissionTypes", null)
                        .WithMany("Commissions")
                        .HasForeignKey("CommissionTypesId");

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Departments", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Periods", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "Secretary")
                        .WithMany()
                        .HasForeignKey("SecretaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommissionType");

                    b.Navigation("Department");

                    b.Navigation("Period");

                    b.Navigation("Secretary");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DefenseGrades", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.DefenseSchedules", "DefenseSchedule")
                        .WithMany("DefenseGrades")
                        .HasForeignKey("DefenseScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefenseSchedule");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DefenseSchedules", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Commissions", "Commission")
                        .WithMany()
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.StudentWork", "StudentWork")
                        .WithMany("DefenseSchedules")
                        .HasForeignKey("StudentWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commission");

                    b.Navigation("StudentWork");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DepartmentExperts", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.AcademicYears", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.CheckTypes", "CheckType")
                        .WithMany()
                        .HasForeignKey("CheckTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Departments", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("RevokedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", "RevokedByUser")
                        .WithMany()
                        .HasForeignKey("RevokedByUserId");

                    b.HasOne("AWMService.Domain.Entities.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("AssignedByUser");

                    b.Navigation("CheckType");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RevokedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Departments", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Institutes", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Institutes", null)
                        .WithMany("Departments")
                        .HasForeignKey("InstitutesId");

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Directions", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.EvaluationCriteria", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.CommissionTypes", "CommissionType")
                        .WithMany()
                        .HasForeignKey("CommissionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CommissionType");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.EvaluationScores", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.CommissionMembers", "CommissionMember")
                        .WithMany()
                        .HasForeignKey("CommissionMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.EvaluationCriteria", "Criteria")
                        .WithMany("EvaluationScores")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.DefenseGrades", "DefenseGrade")
                        .WithMany("EvaluationScores")
                        .HasForeignKey("DefenseGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CommissionMember");

                    b.Navigation("Criteria");

                    b.Navigation("DefenseGrade");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.ExternalContacts", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Notifications", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.PeriodTypes", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Periods", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.AcademicYears", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.AcademicYears", null)
                        .WithMany("Periods")
                        .HasForeignKey("AcademicYearsId");

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.PeriodTypes", "PeriodType")
                        .WithMany()
                        .HasForeignKey("PeriodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.PeriodTypes", null)
                        .WithMany("Periods")
                        .HasForeignKey("PeriodTypesId");

                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("PeriodType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Permissions", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.RolePermissions", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Permissions", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("RevokedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Roles", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("RolesId");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Settings", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Statuses", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.StudentWork", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.AcademicYears", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Topics", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Topics", null)
                        .WithMany("StudentWorks")
                        .HasForeignKey("TopicsId");

                    b.HasOne("AWMService.Domain.Entities.WorkTypes", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.WorkTypes", null)
                        .WithMany("StudentWorks")
                        .HasForeignKey("WorkTypesId");

                    b.Navigation("AcademicYear");

                    b.Navigation("Status");

                    b.Navigation("Student");

                    b.Navigation("Topic");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.SupervisorApprovals", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.AcademicYears", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Departments", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("RevokedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", "RevokedByUser")
                        .WithMany()
                        .HasForeignKey("RevokedByUserId");

                    b.HasOne("AWMService.Domain.Entities.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RevokedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Topics", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Directions", "Direction")
                        .WithMany()
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Directions", null)
                        .WithMany("Topics")
                        .HasForeignKey("DirectionsId");

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Direction");

                    b.Navigation("Status");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.UserRoles", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("RevokedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Roles", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RolesId");

                    b.HasOne("AWMService.Domain.Entities.Users", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Users", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Departments", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AWMService.Domain.Entities.Departments", null)
                        .WithMany("Users")
                        .HasForeignKey("DepartmentsId");

                    b.HasOne("AWMService.Domain.Entities.UserTypes", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.UserTypes", null)
                        .WithMany("Users")
                        .HasForeignKey("UserTypesId");

                    b.Navigation("Department");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.WorkChecks", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.CheckTypes", "CheckType")
                        .WithMany("WorkChecks")
                        .HasForeignKey("CheckTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.Users", "Expert")
                        .WithMany()
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.ExternalContacts", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AWMService.Domain.Entities.Statuses", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AWMService.Domain.Entities.StudentWork", "StudentWork")
                        .WithMany("WorkChecks")
                        .HasForeignKey("StudentWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckType");

                    b.Navigation("Expert");

                    b.Navigation("Reviewer");

                    b.Navigation("Status");

                    b.Navigation("StudentWork");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.WorkTypes", b =>
                {
                    b.HasOne("AWMService.Domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AWMService.Domain.Entities.AcademicYears", b =>
                {
                    b.Navigation("Periods");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CheckTypes", b =>
                {
                    b.Navigation("WorkChecks");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.CommissionTypes", b =>
                {
                    b.Navigation("Commissions");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Commissions", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DefenseGrades", b =>
                {
                    b.Navigation("EvaluationScores");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.DefenseSchedules", b =>
                {
                    b.Navigation("DefenseGrades");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Departments", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Directions", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.EvaluationCriteria", b =>
                {
                    b.Navigation("EvaluationScores");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Institutes", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.PeriodTypes", b =>
                {
                    b.Navigation("Periods");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Roles", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.StudentWork", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("DefenseSchedules");

                    b.Navigation("WorkChecks");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Topics", b =>
                {
                    b.Navigation("StudentWorks");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.UserTypes", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.Users", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.WorkChecks", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("AWMService.Domain.Entities.WorkTypes", b =>
                {
                    b.Navigation("StudentWorks");
                });
#pragma warning restore 612, 618
        }
    }
}
